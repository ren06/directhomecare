<?php

class ClientController extends Controller {

    public $layout = '//layouts/layoutClient';

    public function filters() {
        return array(
            'accessControl',
        );
    }

    public function accessRules() {
        return array(
            array('allow', // allow all users to perform 'index' and 'view' actions
                'actions' => array('userLocation', 'orderPayment', 'confirmation', 'SelectLocation', 'SelectServiceUser',
                    'populateOrderPayment', 'populateUserLocation', 'newBooking', 'myCarers', 'conversation', 'bookCarer',
                    'sendMessage', 'newBooking2', 'specialOffers'
                ),
                'expression' => "UserIdentityUser::isClient()", //'expression'=>'isset($user->role) && ($user->role==="editor")'
                'users' => array('*'),
            ),
            array('deny', // deny all users
                'users' => array('*'),
            ),
        );
    }

    public function actionUserLocation() {

        Wizard2::handleClientSecurity2();

        $user = Yii::app()->user;

        $client = Session::getClient();

        if (!isset($client)) {//coult be not set if user logged in before
            $client = Client::loadModel($user->id);
            Session::setClient($client);
        } else {
            $client->setScenario(Client::SCENARIO_UPDATE_CLIENT);
        }

        $backButton = Wizard2::adjustBrowser();

        $serviceLocations = Session::getServiceLocations();
        $serviceUsers = Session::getServiceUsers();

        if (!isset($serviceLocations) && !isset($serviceUsers)) {
            //first time
            //no session data, check db data
            //these are the master data, stored through 
            //tbl_client_location_address and tbl_client_service_user
            //those 2 tables point only to data in tbl_address and tbl_service_user which have data_type = master data

            $serviceLocations = $client->clientLocations;
            $serviceUsers = $client->serviceUsers;

            if ($serviceLocations == null) {
                $address = new Address();
                $postCode = Session::getPostCode();
                if (isset($postCode) && $postCode != '') {

                    $postCodeData = Maps::getPostCodeData($postCode); //post code should have been validated before
                    $address->city = $postCodeData['city'];
                    $address->post_code = $postCode;
                }

                $serviceLocations[] = $address;
            } else {
                $firstLocation = $serviceLocations[0];
                Session::setSelectedServiceLocation($firstLocation->id);
            }

            if ($serviceUsers == null) {
                $lastJob = $client->getLastJob();
                $serviceUser = new ServiceUser();

                if ($lastJob->who_for == 0) {
                    $serviceUser->first_name = $lastJob->first_name_user;
                    $serviceUser->last_name = $lastJob->last_name_user;
                } else {
                    $serviceUser->first_name = $client->first_name;
                    $serviceUser->last_name = $client->last_name;
                }

                $serviceUsers[] = $serviceUser;
            } else {
                $firstUser = $serviceUsers[0];
                Session::setSelectedServiceUser($firstUser->id);
            }

            $job = $client->getLastJob();

            if (isset($job)) {

                $activitiesValues = $job->formActivities;
            }

            Session::setServiceLocations($serviceLocations);
            Session::setServiceUsers($serviceUsers);
        } else {

            if (!empty($_POST)) {

                $serviceLocations = array();
                $serviceUsers = array();

                //save current data
                if (!empty($_POST['Address'])) {

                    $i = 0;
                    $serviceLocationIsValid = true;

                    foreach ($_POST['Address'] as $serviceLocationData) {

                        if (empty($serviceLocationData['id'])) {
                            $serviceLocation = new Address();
                        } else {
                            $serviceLocationId = $serviceLocationData['id'];
                            $serviceLocation = Address::loadModel($serviceLocationId);
                        }

                        $serviceLocation->setAttributes($serviceLocationData);
                        $serviceLocation->data_type = Address::TYPE_SERVICE_LOCATION_MASTER_DATA;
                        if ($serviceLocation->id == "") {
                            $serviceLocation->id = null; //otherwise no autogenerated 
                        }

                        if (!$serviceLocation->validate()) {

                            $errors = $serviceLocation->getErrors();

                            $serviceLocationIsValid = false;
                        } else {
                            $validServiceLocations[] = $serviceLocation;
                        }
                        $serviceLocations[] = $serviceLocation;
                    }
                }

                $serviceUserIsValid = true;

                foreach ($_POST['ServiceUser'] as $serviceUserData) {

                    if (empty($serviceUserData['id'])) {
                        $serviceUser = new ServiceUser();
                    } else {
                        $serviceUserId = $serviceUserData['id'];
                        $serviceUser = ServiceUser::loadModel($serviceUserId);
                    }

                    $serviceUser->setAttributes($serviceUserData);

                    if (!$serviceUser->validate()) {

                        $errors = $serviceUser->getErrors();

                        $serviceUserIsValid = false;
                    } else {
                        $validServiceUsers[] = $serviceUser;
                    }
                    $serviceUsers[] = $serviceUser;
                }

                Session::setServiceLocations($serviceLocations);
                Session::setServiceUsers($serviceUsers);

                //get activities
//                $formActivities = array();
//                $postParams = $_POST;
//                foreach ($postParams as $paramName => $paramValue) {
//                    if (Util::startsWith($paramName, 'activities_condition_')) {
//                        $formActivities[] = $paramValue;
//                    }
//                }

                if ($_REQUEST['nav'] === 'back') {
                    Wizard2::redirectPrevious();
                } else {

                    $criteria = Session::getFindCarersCriteria();

                    if ($serviceLocationIsValid && $serviceUserIsValid) {

                        foreach ($validServiceLocations as $serviceLocation) {

                            //MASTER DATA
                            $newRecord = $serviceLocation->isNewRecord;
                            $serviceLocation->data_type = Address::TYPE_SERVICE_LOCATION_MASTER_DATA;
                            $serviceLocation->save();

                            if ($newRecord) {
                                //Create association
                                $clientLocationAddress = new ClientLocationAddress();
                                $clientLocationAddress->id_client = $client->id;
                                $clientLocationAddress->id_address = $serviceLocation->id;

                                $clientLocationAddress->save(false);
                            }
                        }
                        //store location in session
                        Session::setSelectedServiceLocation($serviceLocation->id);

                        foreach ($validServiceUsers as $serviceUser) {

                            $newRecord = $serviceUser->isNewRecord;

                            $serviceUser->gender = $criteria['person_gender'];
                            $serviceUser->data_type = ServiceUser::TYPE_MASTER_DATA;
                            $serviceUser->save();

//                            //delete conditions if any                           
//                            ServiceUserCondition::deleteServiceUserConditions($serviceUser->id);
//
//                            //save new condition
//                            foreach ($criteria as $key => $value) {
//
//                                if (Util::contains($key, '_condition')) {
//
//                                    $condition = new ServiceUserCondition();
//                                    $condition->id_service_user = $serviceUser->id;
//                                    $condition->id_condition = $value;
//                                    $condition->save();
//                                }
//                            }

                            if ($newRecord) {

                                $clientServiceUser = new ClientServiceUser();

                                $clientServiceUser->id_client = $client->id;
                                $clientServiceUser->id_service_user = $serviceUser->id;
                                $clientServiceUser->validate();
                                $err = $clientServiceUser->errors;
                                $clientServiceUser->save();
                            }

                            Session::setSelectedServiceUser($serviceUser->id);
                        }

                        Session::setClient($client);

                        Wizard2::redirectNext();
                    } else {

                        Wizard2::redirectCurrent();
                    }
                }
            } else {

                if (Session::getShowErrors()) {
                    foreach ($serviceLocations as $serviceLocation) {
                        $serviceLocation->validate();
                    }
                    foreach ($serviceUsers as $serviceUser) {
                        $serviceUser->validate();
                    }
                } else {
                    foreach ($serviceLocations as $serviceLocation) {
                        $serviceLocation->clearErrors();
                    }
                    foreach ($serviceUsers as $serviceUser) {
                        $serviceUser->clearErrors();
                    }
                }
                Session::setShowErrors(false);
            }
        }

        $this->render('userLocation', array('client' => $client, 'serviceLocations' => $serviceLocations,
            'serviceUsers' => $serviceUsers /* , 'activitiesValues' => $activitiesValues */));
    }

    public function actionOrderPayment() {

        //if user presses the back button on the Confirmation page
        if (Wizard2::getActiveStepName() == Wizard2::VIEW_CONFIRMATION) {
            Wizard2::redirectCurrent(); //keep the user on confirmation page
        }

        //check user can access this page
        Wizard2::handleClientSecurity2();

        //get current quote and client
        $quote = Session::getSelectedValidQuote();
        $client = Session::getClient();
        $errorMessages = '';

        //check amount to pay
        //1st convert quote to booking
        if ($quote instanceof HourlyQuoteSimpleForm || $quote instanceof BookingHourlyOneDayForm || $quote instanceof BookingHourlyRegularlyForm) {
            $booking = $quote->convertBookingHourly();
        }

        //check payment
        $payment = $booking->calculatePayment(Constants::USER_CLIENT, $client->id);

        if ($payment['toPay']->amount == 0 && $payment['paidCredit']->amount == 0) {
            //should never happen
            assert(false);
        }

        if ($payment['toPay']->amount == $payment['paidCredit']->amount) {
            $paymentType = Constants::PAYMENT_VOUCHER_ONLY;
            $creditCardNeeded = false;
            $creditCardValid = true;
            $creditCard = null;
            //$billingAddress = $creditCard->address;
        } elseif ($payment['paidCredit']->amount == 0) {
            $creditCardNeeded = true;
            $paymentType = Constants::PAYMENT_CARD_ONLY;
        } elseif ($payment['toPay']->amount != 0 && $payment['paidCredit']->amount != 0) {
            $creditCardNeeded = true;
            $paymentType = Constants::PAYMENT_CARD_AND_VOUCHER;
        } else {
            assert(false);
        }

        $creditCard = Session::getCreditCard();
        $firstTime = Session::getPaymentPageFirstTime();

        $client->setScenario(Client::SCENARIO_PAYMENT_CLIENT);

        $existingCreditCards = CreditCard::getCreditCard(Yii::app()->user->id, Constants::DATA_MASTER);

        if ($client->wizard_completed == Wizard2::CLIENT_LAST_STEP_INDEX) {
            $returningClient = true;
        } else {
            $returningClient = false;
        }

        $selectedCreditCardRadioButton = Session::getCreditCardRadioButton();

        if ($firstTime) {

            //init cards

            $creditCard = new CreditCard();
            Session::setCreditCard($creditCard);

            if ($returningClient && count($existingCreditCards) > 0) {
                $firstCard = $existingCreditCards[0];
                $selectedCreditCardRadioButton = $firstCard->id;
            } else {
                $selectedCreditCardRadioButton = '';
            }
            Session::setCreditCardRadioButton($selectedCreditCardRadioButton);
            Session::setPaymentPageFirstTime(false);
        } else {

            //GOING NEXT SCREEN
            $clientParam = Yii::app()->request->getPost('Client');
            if (isset($clientParam)) {

                //check if payment is alloweds
                if (Yii::app()->params['test']['allowClientPayment'] == false) {

                    throw new CHttpException(403, Yii::t('texts', 'PAYMENT_DISABLED'));
                }

                //collect Client data
                $mobilePhone = $clientParam['mobile_phone'];
                $firstName = $clientParam['first_name'];
                $lastName = $clientParam['last_name'];

                $client->first_name = $firstName;
                $client->last_name = $lastName;
                $client->mobile_phone = $mobilePhone;

                if (!$returningClient) {
                    $termsConditions = $clientParam['terms_conditions'];
                    $client->terms_conditions = $termsConditions;
                }

                $clientValid = $client->validate();
                $err = $client->errors;

                Session::setClient($client);

                if ($creditCardNeeded) { //collect credit card input
                    $radioParam = Yii::app()->request->getPost('radio_button_credit_card');

                    if (!isset($radioParam) || (isset($radioParam) && $radioParam == UIConstants::RADIO_BUTTON_CREDIT_CARD_OTHER)) {

                        //collect new credit card data
                        $creditCard = new CreditCard();

                        $data = $_POST['CreditCard'];
                        $creditCard->attributes = $data;

                        $month = $_POST['Month'];
                        $year = $_POST['Year'];

                        $creditCard->setExpiryDate($month, $year);
                        $creditCardValid = $creditCard->validate();

                        if (isset($radioParam)) {
                            Session::setCreditCardRadioButton($radioParam);
                        }
                    } else {
                        $creditCardId = $radioParam;
                        CreditCard::authorizeClient($creditCardId);
                        $creditCardEncrypted = CreditCard::loadModel($creditCardId);
                        $creditCard = $creditCardEncrypted->getDecryptedTemporaryInstance();
                        $num = $creditCard->card_number;
                        $creditCardValid = true;
                        Session::setCreditCardRadioButton($radioParam);
                    }
                } else {
                    //for legacy reason a credit card must be used for a booking, even if voucher
                    if (isset($existingCreditCards[0])) {
                        $creditCard = $existingCreditCards[0];
                    }
                }

                Session::setCreditCard($creditCard);

                if ($_REQUEST['nav'] === 'back') {
                    Wizard2::redirectPrevious();
                } else {

                    //save data
                    $client->save();

                    //update header name
                    Yii::app()->user->setState('full_name', $client->first_name . ' ' . $client->last_name);

                    $serviceLocationId = Session::getSelectedServiceLocation();

                    //Billing address is ServiceLocation, make a copy
                    $billingAddress = Address::copy($serviceLocationId, Address::TYPE_BILLING_ADDRESS);
                    $billingAddressValid = $billingAddress->validate();

                    if ($billingAddressValid && $creditCardValid && $clientValid) {

                        //CREDIT CARD AND BILLING OK - CONTINUE
                        //Calculate payment
                        $payment = $booking->calculatePayment(Constants::USER_CLIENT, $client->id);

                        $price = $payment['paidCash'];

                        if ($price->amount > 0) {

                            if (Yii::app()->params['test']['paymentTest'] == false) {
                                $environment = IPaymentHandler::ENVIRONMENT_LIVE;
                            } else {
                                $environment = IPaymentHandler::ENVIRONMENT_TEST;
                            }
                            $paymentHandler = BorgunHandler::getInstance($environment);
                            $technicalSuccess = $paymentHandler->doDirectPayment($client, $creditCard, $billingAddress, $price);
                        } else {
                            $technicalSuccess = true;
                            $transactionRef = null;
                        }

                        if ($technicalSuccess) {

                            if (isset($paymentHandler)) {
                                $transactionRef = $paymentHandler->getTransactionRef();
                                $transactionDateBorgun = $paymentHandler->getTransactionDate();
                                $transactionDate = Calendar::convert_BorgunDateTimeShortYear_DBDateTime($transactionDateBorgun);
                                $success = $paymentHandler->isTransactionSuccessful();
                            } else {
                                //no payment to do
                                $success = true;
                                $transactionDate = null;
                            }

                            if ($success) {

                                $carerId = Session::getSelectedCarer();

                                //Get service users
                                $serviceUserIds = Session::getSelectedServiceUsers();
                                $serviceLocationId = Session::getSelectedServiceLocation();

                                $billingAddressId = $serviceLocationId;

                                //handle booking
                                $newBooking = BookingHandler::handleBooking($booking, $client->id, $serviceUserIds, $serviceLocationId, $carerId, $billingAddressId, $creditCard, $transactionRef, $transactionDate);

                                //get conversation
                                $conversation = Conversation::getConversation($client->id, $carerId);
                                $conversation->createBookingMessage($newBooking);

                                //create a new message type booking
                                //store booking id
                                //Session::setNewBookingId($bookingId);
                                //clear selected carers
                                //Session::setSelectedCarers(null);
                                //update the login name
                                //Yii::app()->user->setState('full_name', $client->first_name . ' ' . $client->last_name);
                                //
                                ClientReferral::creditReferrer($client);

                                Wizard2::redirectNext();
                            } else {
                                $errorMessage = $paymentHandler->getPaymentMessage();

                                Yii::app()->user->setFlash('error', $errorMessage);
                                Wizard2::redirectCurrent();
                            }
                        } else {
                            //show error message
                            $errorMessage = $paymentHandler->getLongErrorMessage();

                            if ($errorMessage == null || $errorMessage == '') {
                                $errorMessage = 'Payment error, probably no internet connection.';
                            }

                            Yii::app()->user->setFlash('error', $errorMessage);
                            Wizard2::redirectCurrent();
                        }
                    } else {
                        Wizard2::redirectCurrent();
                    }
                }
            } else {

                if (Session::getShowErrors()) {
                    $client->validate();
                    $creditCard->validate();
                } else {
                    $client->clearErrors();
                    $creditCard->clearErrors();
                }
                Session::setShowErrors(false);
            }
        }

        $id = $client->id;

        $this->render('orderPayment', array('quote' => $quote, 'client' => $client, 'returningClient' => $returningClient,
            'creditCard' => $creditCard, 'existingCreditCards' => $existingCreditCards, 'errorMessages' => $errorMessages,
            'selectedCreditCardRadioButton' => $selectedCreditCardRadioButton, 'paymentType' => $paymentType
        ));
    }

    public function actionConfirmation() {

        Wizard2::handleClientSecurity4();

        $client = Client::loadModel(Yii::app()->user->id);

        $bookingId = Session::getNewBookingId();
        $quote = Session::getSelectedValidQuote();

        if ($quote instanceof BookingHourlyOneDayForm || $quote instanceof BookingHourlyRegularlyForm || $quote instanceof HourlyQuoteSimpleForm) {
            $quote = $quote->convertBookingHourly();
        }

        //common to both ClientRegistrationController and clientNewBookingController
        $this->render('serviceConfirmation', array('client' => $client, 'quote' => $quote, 'bookingId' => $bookingId));
    }

    public function actionPopulateUserLocation() {

        $serviceUser = new ServiceUser();
        //$serviceUser->gender = rand(Constants::GENDER_FEMALE, Constants::GENDER_MALE);
        $serviceUser->first_name = Random::getRandomServiceUserFirstName($serviceUser->gender);
        $serviceUser->last_name = Random::getRandomServiceUserLastName($serviceUser->gender);

        $serviceUsers[] = $serviceUser;

        $servicLocation = new Address();
        $servicLocation->address_line_1 = Random::getRandomAddressLine1();
        $servicLocation->address_line_2 = Random::getRandomAddressLine2();

        $postCode = Session::getPostCode();
        $data = Maps::getPostCodeData($postCode);
        $servicLocation->city = $data['city'];
        $servicLocation->post_code = $postCode;

        $serviceLocations[] = $servicLocation;

        Session::setServiceUsers($serviceUsers);
        Session::setServiceLocations($serviceLocations);

        Wizard2::redirectCurrent();
    }

    public function actionPopulateOrderPayment() {

        $client = Client::loadModel(Yii::app()->user->id);
        $client->setScenario(Client::SCENARIO_PAYMENT_CLIENT);
        $client->mobile_phone = Random::getRandomMobilePhone();
        $client->terms_conditions = true;

        $creditCard = new CreditCard();
        $creditCard->card_number = '5587402000012011';
        $creditCard->last_three_digits = '415';
        $creditCard->expiry_date = '2018-09-30';

        Session::setClient($client);
        Session::setCreditCard($creditCard);

        Wizard2::redirectCurrent();
    }

    public function actionSelectServiceUser() {

        $request = Yii::app()->request;

        $checkBoxValue = $request->getParam('checkBoxValue');
        $serviceUserId = $request->getParam('index');

        if ($checkBoxValue) {
            Session::setSelectedServiceUser($serviceUserId);
        } else {
            Session::removeSelectedServiceUser($serviceUserId);
        }
    }

    public function actionSelectLocation() {

        $request = Yii::app()->request;

        $locationId = $request->getParam('index');

        Session::setSelectedServiceLocation($locationId);
    }

//    public function actionNewBooking() {
//
//        //takes the user to the findCarer page, either with the last entered post code
//        //or the first address location
//
//        $wizardCompleted = Yii::app()->user->wizard_completed;
//        $clientId = Yii::app()->user->id;
//
//        if ($wizardCompleted == Wizard2::CLIENT_LAST_STEP_INDEX) {
//
//            //check existing post code
//            $criteria = ClientCarerSearchCriteria::get($clientId);
//
//            if (isset($criteria['postCode'])) {
//                $postCode = $criteria['postCode'];
//            } else {
//                $client = Client::loadModel($clientId);
//                $postCode = $client->clientLocations[0]->post_code;
//                //$this->redirect(array('site/index'));
//            }
//            Session::setPostCode($postCode);
//
//            Session::initNewBooking();
//            Wizard2::initStepsClient();
//            Wizard2::setActiveStep(Wizard2::VIEW_FIND_CARERS); //first step active
//
//            $this->redirect(array('site/findCarers'));
//        } else {
//            $this->redirect(array('site/index'));
//        }
//    }

    public function actionMyCarers() {

        $client = Client::loadModel(Yii::app()->user->id);
//        $carersAll = $client->getMyCarers(true, true, 'all', true);
//        $carers = $carersAll['carers'];
//        $carersNotWanted = $carersAll['notWanted'];
//        
        Session::setBackUrl('client/myCarers');

        $this->render('myCarers', array('client' => $client));
        //$this->render('myCarers', array('carers' => $carers, 'carersNotWanted' => $carersNotWanted, 'client' => $client));
    }

    public function actionConversation($id) {

        $conversation = Conversation::loadModel($id);
        $clientId = Yii::app()->user->id;

        $newMessage = new Message();

        $client = Client::loadModel($clientId);

        Session::setBackUrl("client/conversation/id/$id");

        //check conversation belong to carer
        if ($client->id != $conversation->id_client) {
            //throw exception
        }

        $this->render('clientConversation', array('conversation' => $conversation, 'newMessage' => $newMessage));
    }

    public function actionSendMessage() {

        $messageText = $_POST['newMessage'];
        $conversationId = $_POST['conversationId'];

        $conversation = Conversation::loadModel($conversationId);


        $clientMessage = $conversation->createMessage($messageText, Constants::USER_CLIENT, Message::TYPE_MESSAGE, Constants::USER_ALL);
        $carer = $conversation->carer;
        $client = $conversation->client;

        Emails::sendToCarer_NewClientMessage($client, $carer, $messageText, $conversationId);


        $html = $this->renderPartial('/conversation/_message', array('message' => $clientMessage, 'viewer' => Constants::USER_CLIENT, 'carer' => $carer, 'client' => $client), true);

        echo $html;
    }

    public function actionBookCarer($id) {

        //for security reason make sure the carer booked belong to a conversation, to avoid clients to book
        //carers who have not been solicitated

        $carer = Carer::loadModel($id);

        Session::initNewBooking();

        Wizard2::initStepsNewBooking();

        Session::setSelectedCarer($id);

        $this->redirect(array('site/selectDates'));
    }

    public function actionNewBooking() {

        $clientId = Yii::app()->user->id;
        $client = Client::loadModel($clientId);

        $lastJob = $client->getLastJob();

        if (isset($lastJob)) {

            Session::setPostCode($lastJob->post_code);

            $carers = Carer::getCarersFromPostCode($lastJob->post_code, Mission::TYPE_HOURLY);

            $this->render('/site/postJob', array('job' => $lastJob, 'client' => $client, 'carers' => $carers));
        } else {

            //existing client without job
            $this->redirect(array('site/home'));
        }
    }

    public function actionSpecialOffers() {

        $request = Yii::app()->request;
        $clientId = Yii::app()->user->id;
        $client = Client::loadModel($clientId);

        $emailReferral = $request->getPost('email_referral');

        if (isset($emailReferral)) {

            $validator = new CEmailValidator();

            if (!$validator->validateValue($emailReferral)) {

                Yii::app()->user->setFlash('error', 'Please enter a valid email address');
            } else {

                //check not already there
                if (ClientReferral::alreadyExists($clientId, $emailReferral)) {
                    Yii::app()->user->setFlash('error', "You have already sent an email to $emailReferral.");
                } else {

                    if (Client::clientExists($emailReferral)) {
                        $status = ClientReferral::STATUS_ALREADY_CLIENT;
                    } else {
                        $status = ClientReferral::STATUS_INVITED;
                    }

                    $clientReferral = new ClientReferral();
                    $clientReferral->email_referral = $emailReferral;
                    $clientReferral->id_client = $clientId;
                    $clientReferral->status = $status;
                    $clientReferral->save();

                    Yii::app()->user->setFlash('success', "Email sent to $emailReferral.");
                }
            }
        }


        //fetch existin referals

        $this->render('specialOffers', array('client' => $client));
    }

}

